OSS/user_proc
	OSS simulates a demand paging system for swapping disk memory in and out of main memory. It creates a frame table of 256 1k
frames, and 18 page tables of 32 pages. It then spawns an instance of user_proc every 1-500ms, up to 18 at a time, which continuosly
request logical memory addressses from OSS. With -m 1, the addresses are randomly chosen from 0-32k; with -m 2, user_proc has a ~1/4
chance of choosing an address in page 0, ~1/8 chance of an address in page 1, ~1/12 chance of an address in page 2, ~1/16 chance of 
page 3, and so on, heavily favoring the first few pages. This results in far fewer page faults, and is porbably closer to how real
processes page usage would look. 80% of requests are to read, 20% to write. After sending the request via message queue, the child 
waits for OSS to grant the request.
	OSS translates the requested address into a page number and checks to see if that page table entry is valid, i.e. if the page
is in a frame. If so it is a page hit and the request is granted, otherwise it is a page fault and the request is enqueued to the disk
IO queue. Every 14ms, a swap function checks the disk read/write queues, either saving a frame that has been written to to disk, 
finding a free frame to which a page can be loaded, or, if there are no free frames, using the LRU algorithm to choose a frame to swap 
out. Out of the unmodified frames, it picks the one that has been least recently used. If all have been modified, it picks the least 
recently used and must save a frame back. Time of usage is determined by a reference byte for each frame that decays every 100ms and is 
reset when the frame is accessed, and each frame has a dirty bit that is set whenever the frame is written into.
	When a child terminates, it frees its frames and outputs its effective access time. Once40 children have run to completion or a 
time limit is reached (default 2 real life seconds), stats are output to a output.log, including references/sec and page faults/reference.


Installation
	After download, navigate to the directory containing the source files. From the command line, enter "make".


Invocation
	From the directory containing the oss and user_proc executables:
./oss		// runs operating system simulation with default arguments
./oss -m 2	// invokes oss with xVal set to 2, i.e. address favoritism; default is 1, i.e. random addresses
./oss -t 5	// invokes oss with a time limit of 5 real-life seconds, default is 2 seconds; more than 2
		// seconds is unnecessary after switching output from stdout to file output; printf slower than fprintf   


Version Control
	Git was used for version control. A full change log can be found at https://github.com/adwzq4/OS-Project-6/commits/master


MIT License

Copyright (c) 2020 Adam Wilson

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
